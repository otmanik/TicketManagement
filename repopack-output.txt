This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-18T20:54:05.068Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
ReactApp1/ReactApp1.Server/Controllers/WeatherForecastController.cs
ReactApp1/ReactApp1.Server/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
ReactApp1/ReactApp1.Server/obj/Debug/net8.0/ReactApp1.Server.AssemblyInfo.cs
ReactApp1/ReactApp1.Server/obj/Debug/net8.0/ReactApp1.Server.GlobalUsings.g.cs
ReactApp1/ReactApp1.Server/Program.cs
ReactApp1/ReactApp1.Server/WeatherForecast.cs
src/TicketManagement.API/Controllers/TicketsController.cs
src/TicketManagement.API/Middleware/ErrorHandlingMiddleware.cs
src/TicketManagement.API/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
src/TicketManagement.API/obj/Debug/net8.0/TicketManagement.API.AssemblyInfo.cs
src/TicketManagement.API/obj/Debug/net8.0/TicketManagement.API.GlobalUsings.g.cs
src/TicketManagement.API/obj/Debug/net8.0/TicketManagement.API.MvcApplicationPartsAssemblyInfo.cs
src/TicketManagement.API/Program.cs
src/TicketManagement.Application/Class1.cs
src/TicketManagement.Application/Features/Tickets/Commands/CreateTicket.cs
src/TicketManagement.Application/Features/Tickets/Commands/DeleteTicket.cs
src/TicketManagement.Application/Features/Tickets/Commands/UpdateTicket.cs
src/TicketManagement.Application/Features/Tickets/Queries/GetTicketList.cs
src/TicketManagement.Application/Interfaces/IRepository.cs
src/TicketManagement.Application/Interfaces/ITicketRepository.cs
src/TicketManagement.Application/Interfaces/IUnitOfWork.cs
src/TicketManagement.Application/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
src/TicketManagement.Application/obj/Debug/net8.0/TicketManagement.Application.AssemblyInfo.cs
src/TicketManagement.Application/obj/Debug/net8.0/TicketManagement.Application.GlobalUsings.g.cs
src/TicketManagement.Application/ServiceExtensions.cs.cs
src/TicketManagement.Domain/Class1.cs
src/TicketManagement.Domain/Entities/Ticket.cs
src/TicketManagement.Domain/Enums/TicketStatus.cs
src/TicketManagement.Domain/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
src/TicketManagement.Domain/obj/Debug/net8.0/TicketManagement.Domain.AssemblyInfo.cs
src/TicketManagement.Domain/obj/Debug/net8.0/TicketManagement.Domain.GlobalUsings.g.cs
src/TicketManagement.Infrastructure/Data/TicketManagementDbContext.cs
src/TicketManagement.Infrastructure/Data/UnitOfWork.cs
src/TicketManagement.Infrastructure/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
src/TicketManagement.Infrastructure/obj/Debug/net8.0/TicketManagement.Infrastructure.AssemblyInfo.cs
src/TicketManagement.Infrastructure/obj/Debug/net8.0/TicketManagement.Infrastructure.GlobalUsings.g.cs
src/TicketManagement.Infrastructure/Repositories/Repository.cs
src/TicketManagement.Infrastructure/Repositories/TicketRepository.cs
src/TicketManagement.Infrastructure/ServiceExtensions.cs
tests/TicketManagement.UnitTests/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
tests/TicketManagement.UnitTests/obj/Debug/net8.0/TicketManagement.UnitTests.AssemblyInfo.cs
tests/TicketManagement.UnitTests/obj/Debug/net8.0/TicketManagement.UnitTests.GlobalUsings.g.cs
tests/TicketManagement.UnitTests/UnitTest1.cs

================================================================
Repository Files
================================================================

================
File: ReactApp1/ReactApp1.Server/Controllers/WeatherForecastController.cs
================
using Microsoft.AspNetCore.Mvc;

namespace ReactApp1.Server.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class WeatherForecastController : ControllerBase
    {
        private static readonly string[] Summaries = new[]
        {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };

        private readonly ILogger<WeatherForecastController> _logger;

        public WeatherForecastController(ILogger<WeatherForecastController> logger)
        {
            _logger = logger;
        }

        [HttpGet(Name = "GetWeatherForecast")]
        public IEnumerable<WeatherForecast> Get()
        {
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = Summaries[Random.Shared.Next(Summaries.Length)]
            })
            .ToArray();
        }
    }
}

================
File: ReactApp1/ReactApp1.Server/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

================
File: ReactApp1/ReactApp1.Server/obj/Debug/net8.0/ReactApp1.Server.AssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ReactApp1.Server")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("ReactApp1.Server")]
[assembly: System.Reflection.AssemblyTitleAttribute("ReactApp1.Server")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Généré par la classe MSBuild WriteCodeFragment.

================
File: ReactApp1/ReactApp1.Server/obj/Debug/net8.0/ReactApp1.Server.GlobalUsings.g.cs
================
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;

================
File: ReactApp1/ReactApp1.Server/Program.cs
================
var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

app.UseDefaultFiles();
app.UseStaticFiles();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.MapFallbackToFile("/index.html");

app.Run();

================
File: ReactApp1/ReactApp1.Server/WeatherForecast.cs
================
namespace ReactApp1.Server
{
    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public string? Summary { get; set; }
    }
}

================
File: src/TicketManagement.API/Controllers/TicketsController.cs
================
using MediatR;
using Microsoft.AspNetCore.Mvc;
using TicketManagementSystem.Application.Features.Tickets.Commands;
using TicketManagementSystem.Application.Features.Tickets.Queries;

namespace TicketManagementSystem.API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class TicketsController : ControllerBase
    {
        private readonly IMediator _mediator;

        public TicketsController(IMediator mediator)
        {
            _mediator = mediator;
        }

        [HttpPost]
        public async Task<ActionResult<int>> CreateTicket([FromBody] CreateTicketCommand command)
        {
            var result = await _mediator.Send(command);
            return Ok(result);
        }
        [HttpGet]
        public async Task<ActionResult<TicketListVm>> GetTickets([FromQuery] GetTicketListQuery query)
        {
            var result = await _mediator.Send(query);
            return Ok(result);
        }
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateTicket(int id, [FromBody] UpdateTicketCommand command)
        {
            if (id != command.Id)
            {
                return BadRequest();
            }

            var result = await _mediator.Send(command);

            if (!result)
            {
                return NotFound();
            }

            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteTicket(int id)
        {
            var command = new DeleteTicketCommand { Id = id };
            var result = await _mediator.Send(command);

            if (!result)
            {
                return NotFound();
            }

            return NoContent();
        }
    }
}

================
File: src/TicketManagement.API/Middleware/ErrorHandlingMiddleware.cs
================
namespace TicketManagement.API.Middleware
{
    public class ErrorHandlingMiddleware
    {
    }
}

================
File: src/TicketManagement.API/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

================
File: src/TicketManagement.API/obj/Debug/net8.0/TicketManagement.API.AssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("TicketManagement.API")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("TicketManagement.API")]
[assembly: System.Reflection.AssemblyTitleAttribute("TicketManagement.API")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Généré par la classe MSBuild WriteCodeFragment.

================
File: src/TicketManagement.API/obj/Debug/net8.0/TicketManagement.API.GlobalUsings.g.cs
================
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;

================
File: src/TicketManagement.API/obj/Debug/net8.0/TicketManagement.API.MvcApplicationPartsAssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Microsoft.AspNetCore.OpenApi")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Généré par la classe MSBuild WriteCodeFragment.

================
File: src/TicketManagement.API/Program.cs
================
using Microsoft.EntityFrameworkCore;
using TicketManagementSystem.Infrastructure.Data;
using TicketManagementSystem.Application;
using TicketManagementSystem.Infrastructure;
using TicketManagementSystem.Application.Interfaces;
using TicketManagementSystem.Infrastructure.Repositories;
using TicketManagement.API.Middleware;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

builder.Services.AddDbContext<TicketManagementDbContext>(options =>
    options.UseSqlServer(
        builder.Configuration.GetConnectionString("DefaultConnection"),
        b => b.MigrationsAssembly(typeof(TicketManagementDbContext).Assembly.FullName)));

builder.Services.AddInfrastructureServices(builder.Configuration);
builder.Services.AddApplicationServices();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseMiddleware<ErrorHandlingMiddleware>();

app.UseAuthorization();

app.MapControllers();

app.Run();

================
File: src/TicketManagement.Application/Class1.cs
================
namespace TicketManagement.Application;

public class Class1
{

}

================
File: src/TicketManagement.Application/Features/Tickets/Commands/CreateTicket.cs
================
using MediatR;
using FluentValidation;
using TicketManagementSystem.Application.Interfaces;
using TicketManagementSystem.Domain.Entities;
using TicketManagementSystem.Domain.Enums;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace TicketManagementSystem.Application.Features.Tickets.Commands
{
    public class CreateTicketCommand : IRequest<int>
    {
        public string Description { get; set; }
        public DateTime Date { get; set; }
    }

    public class CreateTicketCommandHandler : IRequestHandler<CreateTicketCommand, int>
    {
        private readonly IUnitOfWork _unitOfWork;

        public CreateTicketCommandHandler(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public async Task<int> Handle(CreateTicketCommand request, CancellationToken cancellationToken)
        {
            var ticket = new Ticket
            {
                Description = request.Description,
                Date = request.Date,
                Status = TicketStatus.Open 
            };

            await _unitOfWork.Tickets.AddAsync(ticket);
            await _unitOfWork.SaveChangesAsync(cancellationToken);

            return ticket.Id;
        }
    }

    public class CreateTicketCommandValidator : AbstractValidator<CreateTicketCommand>
    {
        public CreateTicketCommandValidator()
        {
            RuleFor(v => v.Description)
                .NotEmpty().WithMessage("Description is required.")
                .MaximumLength(200).WithMessage("Description must not exceed 200 characters.");

            RuleFor(v => v.Date)
                .NotEmpty().WithMessage("Date is required.")
                .LessThanOrEqualTo(DateTime.UtcNow).WithMessage("Date cannot be in the future.");
        }
    }
}

================
File: src/TicketManagement.Application/Features/Tickets/Commands/DeleteTicket.cs
================
using MediatR;
using FluentValidation;
using TicketManagementSystem.Application.Interfaces;
using System.Threading;
using System.Threading.Tasks;

namespace TicketManagementSystem.Application.Features.Tickets.Commands
{
    public class DeleteTicketCommand : IRequest<bool>
    {
        public int Id { get; set; }
    }

    public class DeleteTicketCommandHandler : IRequestHandler<DeleteTicketCommand, bool>
    {
        private readonly IUnitOfWork _unitOfWork;

        public DeleteTicketCommandHandler(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public async Task<bool> Handle(DeleteTicketCommand request, CancellationToken cancellationToken)
        {
            var ticket = await _unitOfWork.Tickets.GetByIdAsync(request.Id);

            if (ticket == null)
            {
                return false;
            }

            await _unitOfWork.Tickets.DeleteAsync(ticket);
            var result = await _unitOfWork.SaveChangesAsync(cancellationToken);

            return result > 0;
        }
    }

    public class DeleteTicketCommandValidator : AbstractValidator<DeleteTicketCommand>
    {
        public DeleteTicketCommandValidator()
        {
            RuleFor(v => v.Id)
                .GreaterThan(0).WithMessage("Id must be greater than 0.");
        }
    }
}

================
File: src/TicketManagement.Application/Features/Tickets/Commands/UpdateTicket.cs
================
using MediatR;
using FluentValidation;
using TicketManagementSystem.Application.Interfaces;
using TicketManagementSystem.Domain.Entities;
using TicketManagementSystem.Domain.Enums;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace TicketManagementSystem.Application.Features.Tickets.Commands
{
    public class UpdateTicketCommand : IRequest<bool>
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public TicketStatus Status { get; set; }
        public DateTime Date { get; set; }
    }

    public class UpdateTicketCommandHandler : IRequestHandler<UpdateTicketCommand, bool>
    {
        private readonly IUnitOfWork _unitOfWork;

        public UpdateTicketCommandHandler(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public async Task<bool> Handle(UpdateTicketCommand request, CancellationToken cancellationToken)
        {
            var ticket = await _unitOfWork.Tickets.GetByIdAsync(request.Id);

            if (ticket == null)
            {
                return false;
            }

            ticket.Description = request.Description;
            ticket.Status = request.Status;
            ticket.Date = request.Date;

            var result = await _unitOfWork.SaveChangesAsync(cancellationToken);

            return result > 0;
        }
    }

    public class UpdateTicketCommandValidator : AbstractValidator<UpdateTicketCommand>
    {
        public UpdateTicketCommandValidator()
        {
            RuleFor(v => v.Id)
                .GreaterThan(0).WithMessage("Id must be greater than 0.");

            RuleFor(v => v.Description)
                .NotEmpty().WithMessage("Description is required.")
                .MaximumLength(200).WithMessage("Description must not exceed 200 characters.");

            RuleFor(v => v.Status)
                .IsInEnum().WithMessage("Invalid status.");

            RuleFor(v => v.Date)
                .NotEmpty().WithMessage("Date is required.")
                .LessThanOrEqualTo(DateTime.UtcNow).WithMessage("Date cannot be in the future.");
        }
    }
}

================
File: src/TicketManagement.Application/Features/Tickets/Queries/GetTicketList.cs
================
using AutoMapper;
using MediatR;
using FluentValidation;
using TicketManagementSystem.Application.Interfaces;
using TicketManagementSystem.Domain.Entities;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace TicketManagementSystem.Application.Features.Tickets.Queries
{
    public class GetTicketListQuery : IRequest<TicketListVm>
    {
        public int PageNumber { get; set; } = 1;
        public int PageSize { get; set; } = 10;
    }

    public class GetTicketListQueryHandler : IRequestHandler<GetTicketListQuery, TicketListVm>
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public GetTicketListQueryHandler(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public async Task<TicketListVm> Handle(GetTicketListQuery request, CancellationToken cancellationToken)
        {
            var tickets = await _unitOfWork.Tickets.GetPagedReponseAsync(request.PageNumber, request.PageSize);
            var ticketDtos = _mapper.Map<List<TicketDto>>(tickets);

            return new TicketListVm
            {
                Tickets = ticketDtos,
                PageNumber = request.PageNumber,
                PageSize = request.PageSize,
            };
        }
    }

    public class GetTicketListQueryValidator : AbstractValidator<GetTicketListQuery>
    {
        public GetTicketListQueryValidator()
        {
            RuleFor(x => x.PageNumber)
                .GreaterThanOrEqualTo(1).WithMessage("PageNumber at least greater than or equal to 1.");

            RuleFor(x => x.PageSize)
                .GreaterThanOrEqualTo(1).WithMessage("PageSize at least greater than or equal to 1.");
        }
    }

    public class TicketListVm
    {
        public IList<TicketDto> Tickets { get; set; }
        public int PageNumber { get; set; }
        public int PageSize { get; set; }
    }

    public class TicketDto
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public string Status { get; set; }
        public System.DateTime Date { get; set; }
    }

    public class GetTicketListProfile : Profile
    {
        public GetTicketListProfile()
        {
            CreateMap<Ticket, TicketDto>();
        }
    }
}

================
File: src/TicketManagement.Application/Interfaces/IRepository.cs
================
using System.Linq.Expressions;

namespace TicketManagementSystem.Application.Interfaces
{
    public interface IRepository<T> where T : class
    {
        Task<T> GetByIdAsync(int id);
        Task<IEnumerable<T>> GetAllAsync();
        Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate);
        Task AddAsync(T entity);
        Task UpdateAsync(T entity);
        Task DeleteAsync(T entity);
    }
}

================
File: src/TicketManagement.Application/Interfaces/ITicketRepository.cs
================
using TicketManagementSystem.Domain.Entities;

namespace TicketManagementSystem.Application.Interfaces
{
    public interface ITicketRepository : IRepository<Ticket>
    {
        public Task<IEnumerable<Ticket>> GetPagedReponseAsync(int pageNumber, int pageSize);
    }
}

================
File: src/TicketManagement.Application/Interfaces/IUnitOfWork.cs
================
using System;
using System.Threading.Tasks;

namespace TicketManagementSystem.Application.Interfaces
{
    public interface IUnitOfWork : IDisposable
    {
        ITicketRepository Tickets { get; }
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default);

    }
}

================
File: src/TicketManagement.Application/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

================
File: src/TicketManagement.Application/obj/Debug/net8.0/TicketManagement.Application.AssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("TicketManagement.Application")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("TicketManagement.Application")]
[assembly: System.Reflection.AssemblyTitleAttribute("TicketManagement.Application")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Généré par la classe MSBuild WriteCodeFragment.

================
File: src/TicketManagement.Application/obj/Debug/net8.0/TicketManagement.Application.GlobalUsings.g.cs
================
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

================
File: src/TicketManagement.Application/ServiceExtensions.cs.cs
================
using Microsoft.Extensions.DependencyInjection;
using System.Reflection;
using MediatR;
using FluentValidation;

namespace TicketManagementSystem.Application
{
    public static class ServiceExtensions
    {
        public static void AddApplicationServices(this IServiceCollection services)
        {
            services.AddAutoMapper(Assembly.GetExecutingAssembly());
            services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly()));
            services.AddValidatorsFromAssembly(Assembly.GetExecutingAssembly());
        }
    }
}

================
File: src/TicketManagement.Domain/Class1.cs
================
namespace TicketManagement.Domain;

public class Class1
{

}

================
File: src/TicketManagement.Domain/Entities/Ticket.cs
================
using System;
using TicketManagementSystem.Domain.Enums;

namespace TicketManagementSystem.Domain.Entities
{
    public class Ticket
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public TicketStatus Status { get; set; }
        public DateTime Date { get; set; }
    }
}

================
File: src/TicketManagement.Domain/Enums/TicketStatus.cs
================
namespace TicketManagementSystem.Domain.Enums
{
    public enum TicketStatus
    {
        Open,
        Closed
    }
}

================
File: src/TicketManagement.Domain/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

================
File: src/TicketManagement.Domain/obj/Debug/net8.0/TicketManagement.Domain.AssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("TicketManagement.Domain")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("TicketManagement.Domain")]
[assembly: System.Reflection.AssemblyTitleAttribute("TicketManagement.Domain")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Généré par la classe MSBuild WriteCodeFragment.

================
File: src/TicketManagement.Domain/obj/Debug/net8.0/TicketManagement.Domain.GlobalUsings.g.cs
================
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

================
File: src/TicketManagement.Infrastructure/Data/TicketManagementDbContext.cs
================
using Microsoft.EntityFrameworkCore;
using TicketManagementSystem.Domain.Entities;


namespace TicketManagementSystem.Infrastructure.Data
{
    public class TicketManagementDbContext : DbContext
    {
        public TicketManagementDbContext(DbContextOptions<TicketManagementDbContext> options)
            : base(options)
        {
        }

        public DbSet<Ticket> Tickets { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Ticket>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Description).IsRequired().HasMaxLength(200);
                entity.Property(e => e.Status).IsRequired();
                entity.Property(e => e.Date).IsRequired();
            });
        }
    }
}

================
File: src/TicketManagement.Infrastructure/Data/UnitOfWork.cs
================
using System.Threading;
using System.Threading.Tasks;
using TicketManagementSystem.Application.Interfaces;
using TicketManagementSystem.Infrastructure.Repositories;

namespace TicketManagementSystem.Infrastructure.Data
{
    public class UnitOfWork : IUnitOfWork
    {
        private readonly TicketManagementDbContext _context;

        public UnitOfWork(TicketManagementDbContext context)
        {
            _context = context;
            Tickets = new TicketRepository(_context);
        }

        public ITicketRepository Tickets { get; private set; }

        public async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
        {
            return await _context.SaveChangesAsync(cancellationToken);
        }

        public void Dispose()
        {
            _context.Dispose();
        }

    }
}

================
File: src/TicketManagement.Infrastructure/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

================
File: src/TicketManagement.Infrastructure/obj/Debug/net8.0/TicketManagement.Infrastructure.AssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("TicketManagement.Infrastructure")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("TicketManagement.Infrastructure")]
[assembly: System.Reflection.AssemblyTitleAttribute("TicketManagement.Infrastructure")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Généré par la classe MSBuild WriteCodeFragment.

================
File: src/TicketManagement.Infrastructure/obj/Debug/net8.0/TicketManagement.Infrastructure.GlobalUsings.g.cs
================
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

================
File: src/TicketManagement.Infrastructure/Repositories/Repository.cs
================
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using TicketManagementSystem.Application.Interfaces;
using TicketManagementSystem.Infrastructure.Data;

namespace TicketManagementSystem.Infrastructure.Repositories
{
    public class Repository<T> : IRepository<T> where T : class
    {
        protected readonly TicketManagementDbContext _context;
        protected readonly DbSet<T> _dbSet;

        public Repository(TicketManagementDbContext context)
        {
            _context = context;
            _dbSet = context.Set<T>();
        }

        public async Task<T> GetByIdAsync(int id)
        {
            return await _dbSet.FindAsync(id);
        }

        public async Task<IEnumerable<T>> GetAllAsync()
        {
            return await _dbSet.ToListAsync();
        }

        public async Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate)
        {
            return await _dbSet.Where(predicate).ToListAsync();
        }

        public async Task AddAsync(T entity)
        {
            await _dbSet.AddAsync(entity);
        }

        public Task UpdateAsync(T entity)
        {
            _dbSet.Attach(entity);
            _context.Entry(entity).State = EntityState.Modified;
            return Task.CompletedTask;
        }

        public Task DeleteAsync(T entity)
        {
            _dbSet.Remove(entity);
            return Task.CompletedTask;
        }
    }
}

================
File: src/TicketManagement.Infrastructure/Repositories/TicketRepository.cs
================
using Microsoft.EntityFrameworkCore;
using TicketManagementSystem.Application.Interfaces;
using TicketManagementSystem.Domain.Entities;
using TicketManagementSystem.Infrastructure.Data;

namespace TicketManagementSystem.Infrastructure.Repositories
{
    public class TicketRepository : Repository<Ticket>, ITicketRepository
    {
        public TicketRepository(TicketManagementDbContext context) : base(context)
        {
        }

        public async Task<IEnumerable<Ticket>> GetPagedReponseAsync(int pageNumber, int pageSize)
        {
            return await _context.Tickets
                .Skip((pageNumber - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();
        }
    }
}

================
File: src/TicketManagement.Infrastructure/ServiceExtensions.cs
================
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using TicketManagementSystem.Application.Interfaces;
using TicketManagementSystem.Infrastructure.Data;
using TicketManagementSystem.Infrastructure.Repositories;

namespace TicketManagementSystem.Infrastructure
{
    public static class ServiceExtensions
    {
        public static void AddInfrastructureServices(this IServiceCollection services, IConfiguration configuration)
        {
            services.AddScoped<IUnitOfWork, UnitOfWork>();
            services.AddScoped(typeof(IRepository<>), typeof(Repository<>));
            services.AddScoped<ITicketRepository, TicketRepository>();
        }
    }
}

================
File: tests/TicketManagement.UnitTests/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

================
File: tests/TicketManagement.UnitTests/obj/Debug/net8.0/TicketManagement.UnitTests.AssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("TicketManagement.UnitTests")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("TicketManagement.UnitTests")]
[assembly: System.Reflection.AssemblyTitleAttribute("TicketManagement.UnitTests")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Généré par la classe MSBuild WriteCodeFragment.

================
File: tests/TicketManagement.UnitTests/obj/Debug/net8.0/TicketManagement.UnitTests.GlobalUsings.g.cs
================
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::Xunit;

================
File: tests/TicketManagement.UnitTests/UnitTest1.cs
================
namespace TicketManagement.UnitTests;

public class UnitTest1
{
    [Fact]
    public void Test1()
    {

    }
}
